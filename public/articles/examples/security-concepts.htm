
<h2>Cross-Origin Requests (CORS)</h2>
<p>The Cross-Origin Request (CORS) is a web request where any of the protocol, domain or port parameters are different from the the original web page that was served. The Same-Origin policy (see next) is a security feature implemented in all modern browsers that restricts web pages from making CORS requests unless the cross-origin server responds to the browser that is OK. We will see how.</p>

<h3>Origin header and Same-Origin Policy</h3>
<p>The Origin header in a CORS request is used to enforce the "same-origin" policy unless browser + cross-origin server allows otherwise. This <b>same-origin</b> policy prevents malicious scripts from stealing sensitive information, such as user credentials or session cookies. How scripts can do this is beyond the scope of these notes but just take it that we need to prevent this in our web apps.</p>

<h3>How Browsers Implement the CORS Policy</h3>
<p>To clarify then, the CORS policy is enforced only by the browsers which in turn will depend on the cross-origin endpoint to play ball with the request. The browser sends certain CORS headers to the cross-origin server and the latter must return specific header values in its response if the request is to be successful. Otherwise the browser will forbid the access and log an error.</p>

<p>In effect then the <b>cross-origin server</b> also helps control what is allowed. If it does nothing - the browser will block the request. If the server wants to allow the request it must respond with an appropriate header - e.g. the <b>Access-Control-Allow-Origin</b> header that tells the browser what domain/port/protocol is acceptable.</p>

<p> When using node.js - the Fetch API comes to our aid in handling the various types for CORS request that a browser can invoke. Apparently (see later) the API can automatically handle the <b>CORS preflight</b> request, making it effortless to work with CORS requests.</p>

<h3>The 3 types of CORS requests</h3>
<p>The browser determines the type of CORS request to be sent to the cross-origin server and it depends on the kind of operations we want to perform with the resource in the cross-origin server. The three types are:</p>
<ul><li><b>simple</b>: this use case is where the browser determines a cross-origin request is relatively safe - like a GET request. See the details for the problem and the solution in the cross-site server:  
       <button id="cors-simple-button" onclick='toggleTextFile("examples/cors-simple.htm2", "cors-simple", this)'>View htm2</button>
       <div id="cors-simple"></div>
    </li>
	<li><b>preflight</b>: in contrast to simple use case, a browser uses the more cautious preflight method when the request could be destructive like a PUT or DELETE; see here: 
	   <button id="cors-preflight-button" onclick='toggleTextFile("examples/cors-preflight.htm2", "cors-preflight", this)'>View htm2</button>
       <div id="cors-preflight"></div></li>
	<li><b>requests with credentials</b>: this adds a further security feature by introducing credentials to allow authentication to be included as part of the request: 
	   <button id="cors-creds-button" onclick='toggleTextFile("examples/cors-creds.htm2", "cors-creds", this)'>View htm2</button>
	   <div id="cors-creds"></div>
	</li>
</ul>

<h2>NodeJs handle CORS request with Fetch API</h3>
<p>The Fetch API is a modern interface for making network requests that automatically handles CORS smoothly. Fetch API includes an Origin header in every request to identify the domain the request is coming from, which is essential for CORS requests.</p>
<h4>Example GET request</h4>
To make a simple GET request with Fetch API and CORS, you can use the following code:
<p class="codeblock">
fetch('https://another.com/v1/carlist', {
<br />&nbsp;&nbsp;method: 'GET',
<br />&nbsp;&nbsp;mode: 'cors',
<br />&nbsp;&nbsp;headers: {
<br />&nbsp;&nbsp;&nbsp;&nbsp;'Content-Type': 'application/json',
<br />&nbsp;&nbsp;&nbsp;&nbsp;'X-YourAPI-Key': 'your-api-key'
<br />&nbsp;&nbsp;}
<br />})
<br />.then(response =&gt; response.json())
<br />.then(data =&gt; console.log(data))
<br />.catch(error =&gt; console.error(error));
</p>

<p>In this example, the web page is making a GET request to the another.com carlist API. The request could be sent via a proxy server and adds the "X-YourAPI-Key" header to the request to authenticate the user. The mode option is set to cors to indicate this is a Cross-Origin request.</p>

<p>If the another.com carlist API allow the CORS requests from the web page's domain, the response will be accepted and be parsed as JSON data and logged to the console. Otherwise, a CORS error will be thrown and caught in the catch block.</p>


