
<h4>Simple CORS Requests (GET, POST, and HEAD)</h4>
<p>To recap: simple requests are sent by the browser for performing operations it considers safe like a GET request for fetching data or a HEAD request to check status. The request sent by the browser is simple if one of the below conditions applies:</p>

<ul>
	<li>The HTTP request method is GET, POST, or HEAD</li>
	<li>The HTTP request contains a CORS safe-listed header: Accept, Accept-Language, Content-Language, Content-Type.</li>
	<li>When the HTTP request contains Content-Type header, it contains as itâ€™s values: application/x-www-form-urlencoded, multipart/form-data, or text/plain</li>
	<li>No event listeners are registered on any XMLHttpRequestUpload object</li>
	<li>No ReadableStream object is used in the request</li>
</ul>
<p>The browser sends the simple request as a normal request similar to the Same Origin request after adding the Origin header, and the Access-Control-Allow-Origin header is checked by the browser when the response is returned.</p>

<p>The browser is able to read and render the response only if the value of the Access-Control-Allow-Origin header matches the value of the Origin header sent in the request. The Origin header contains the source origin of the request.</p>

<h3>Fixing the simple CORS issue</h3>
<p>So where we have say these conditions:
<ul><li>The origin server is http://localhost:9000 which sends a page to the Browser</li>
    <li>This page has a request in it that tries to access http://localhost:8000 =&gt; a cross-origin request</li>
</ul>
<p>If nothing is done to protect against this - then browser will generate an error in its log:</p>
    <div class="codeblock">Access to 'XMLHttpRequest' at 'http://localhost:8000/orders' from origin 'http://localhost:9000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
    </div>
<p>So as suggested in the CORS error description, let us modify the code in the cross-origin server to return the CORS header Access-Control-Allow-Origin in the response:</p>
<div class="codeblock">
app.use(function(req, res, next) {
<br/>
<br/>&nbsp;&nbsp;res.header("Access-Control-Allow-Origin", "http://localhost:9000");
<br/>&nbsp;&nbsp;next();
<br/>});
<br/>
<br/>app.get('/orders', (req, res) => {
<br/>&nbsp;&nbsp;console.log('Returning orders');
<br/>&nbsp;&nbsp;res.send(orders);
<br/>});</div>
<p>Here the cross-origin server is returning a CORS header Access-Control-Allow-Origin with a value of source origin http://localhost:9000 to fix the CORS error. Problem: so can't some little hacker just do the same?</p>


