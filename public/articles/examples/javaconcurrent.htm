<h2>Java concurrency</h2>
<h3>1. Overview</h3>
<p>The java.util.concurrent package provides tools for creating concurrent applications.
In this article, we will do an overview of the whole package.</p>
<h2>2. Main Components</h2> 
The java.util.concurrent contains way too many features to discuss in a single write-up. In this article, we will mainly focus on some of the most useful utilities from this package like:
<ul>
 <li>Executor</li>
 <li>ExecutorService</li>
 <li>ScheduledExecutorService</li>
 <li>Future</li>
 <li>CountDownLatch</li>
 <li>CyclicBarrier</li>
 <li>Semaphore</li>
 <li>ThreadFactory</li>
 <li>BlockingQueue</li>
 <li>DelayQueue</li>
 <li>Locks</li>
 <li>Phaser</li>
</ul>

<h3>2.1. Executor</h3>
<p>Executor is an interface that represents an object that executes provided tasks.</p>
<p>It depends on the particular implementation (from where the invocation is initiated) if the task should be run on a new or 
current thread. Hence, using this interface, we can decouple the task execution flow from the actual task execution mechanism.
One point to note here is that Executor does not strictly require the task execution to be asynchronous. In the simplest case,
an executor can invoke the submitted task instantly in the invoking thread.
We need to create an invoker to create the executor instance:</p>
<div class="codeblock">public class Invoker implements Executor {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;@Override
<br/>&nbsp;&nbsp;&nbsp;&nbsp;public void execute(Runnable r) {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.run();
<br/>&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
</div>
<h3>2.2. ExecutorService</h3>
<p>ExecutorService is a complete solution for asynchronous processing. It manages an in-memory queue and schedules submitted tasks
based on thread availability.</p>
<p>To use ExecutorService, we need to create one Runnable class.</p>
<div class="codeblock">
public class Task implements Runnable {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;@Override
<br/>&nbsp;&nbsp;&nbsp;&nbsp;public void run() {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// task details
<br/>&nbsp;&nbsp;&nbsp;&nbsp;}
}</div>

<p>Now we can create the ExecutorService instance and assign this task. At the time of creation, we need to specify the thread-pool size.</p>
<div class="codeblock">
<br/>&nbsp;&nbsp;ExecutorService executor = Executors.newFixedThreadPool(10);
</div>
<p>If we want to create a single-threaded ExecutorService instance, we can use <b>newSingleThreadExecutor(ThreadFactory threadFactory)</b>
 to create the instance.Once the executor is created, we can use it to submit the task.</p>

<div class="codeblock">
public void execute() { 
<br/>&nbsp;&nbsp;executor.submit(new Task()); 
}
</div>
<p>We can also create the Runnable instance while submitting the task.
</p>
<div class="codeblock">
executor.submit(() -> {
<br/>&nbsp;&nbsp;new Task();
});
</div>
<p>It also comes with two out-of-the-box execution termination methods. The first one is shutdown(); it waits until all the 
submitted tasks finish executing. The other method is shutdownNow() which attempts to terminate all actively executing tasks
;and halts the processing of waiting tasks.
</p>
<p>There is also another method awaitTermination(long timeout, TimeUnit unit) which forcefully blocks until all tasks have
completed execution after a shutdown event triggered or execution-timeout occurred, or the execution thread itself is interrupted:
</p>
<div class="codeblock">
try {
<br/>&nbsp;&nbsp;executor.awaitTermination( 20l, TimeUnit.NANOSECONDS );
} catch (InterruptedException e) {
<br/>&nbsp;&nbsp;e.printStackTrace();
}
</div>

<p>For the other concurrent explanation see <a href="https://www.baeldung.com/java-util-concurrent" targe="_blank">Baeldung</a></p>
