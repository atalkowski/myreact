<h1>Containerize a Node.js application</h1>
<h2>Prerequisites</h2>
<li>You have installed the latest version of Docker Desktop.</li>
<li>You have a git client. The examples in this section use a command-line based git client, but you can use any client.</li>
<h2>Overview</h2>
This section walks you through containerizing and running a Node.js application.
<h3>Get the sample application</h3>
Clone the sample application to use with this guide. Open a terminal, change directory to a directory that you want to work in, and run the following command to clone the repository:
<div class="code2">git clone https://github.com/docker/docker-nodejs-sample</div>

<h3>Initialize Docker assets</h3>
<p>Now that you have an application, you can use docker init to create the necessary Docker assets to containerize your application. Inside the docker-nodejs-sample directory, run the docker init command in a terminal. docker init provides some default configuration, but you'll need to answer a few questions about your application. Refer to the following example to answer the prompts from docker init and use the same answers for your prompts.</p>

<table width="80%" border-width="20px"><tr><td>
docker init
<br/>Welcome to the Docker Init CLI!
<br/>
<br/>This utility will walk you through creating the following files with sensible defaults for your project:
<br/>  - .dockerignore
<br/>  - Dockerfile
<br/>  - compose.yaml
<br/>  - README.Docker.md
<br/>
<br/>Let's get started!
<br/>
<br/>? What application platform does your project use? Node
<br/>? What version of Node do you want to use? 18.0.0
<br/>? Which package manager do you want to use? npm
<br/>? What command do you want to use to start the app: node src/index.js
<br/>? What port does your server listen on? 3000
</td></tr></table>

<p>You should now have the following contents in your docker-nodejs-sample directory.

    <br/>├── docker-nodejs-sample/
    <br/>│ ├── spec/
    <br/>│ ├── src/
    <br/>│ ├── .dockerignore
    <br/>│ ├── .gitignore
    <br/>│ ├── compose.yaml
    <br/>│ ├── Dockerfile
    <br/>│ ├── package-lock.json
    <br/>│ ├── package.json
    <br/>│ ├── README.Docker.md
    <br/>│ └── README.md
    <br/>
    To learn more about the files that docker init added, see the following:
<ul>
    <li>Dockerfile</li>
    <li>.dockerignore</li>
    <li>compose.yaml</li>
</ul>

<h3>Run the application</h3>
Inside the docker-nodejs-sample directory, run the following command in a terminal.
<div class="code2">docker compose up --build
</div>
Open a browser and view the application at <a href="http://localhost:3000">http://localhost:3000</a>. You should see a simple todo application.
<br/>In the terminal, press ctrl+c to stop the application.

<h3>Run the application in the background</h3>
You can run the application detached from the terminal by adding the -d option. Inside the docker-nodejs-sample directory, run the following command in a terminal.

<div class="code2"> docker compose up --build -d</div>
Open a browser and view the application at http://localhost:3000. You should see a simple todo application.
<br>
In the terminal, run the following command to stop the application.
<div class="code2"> docker compose down</div>

For more information about Compose commands, see the Compose CLI reference.

